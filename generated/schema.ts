// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VerificationRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerificationRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerificationRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerificationRequest", id.toString(), this);
    }
  }

  static load(id: string): VerificationRequest | null {
    return changetype<VerificationRequest | null>(
      store.get("VerificationRequest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get requestor_id(): string {
    let value = this.get("requestor_id");
    return value!.toString();
  }

  set requestor_id(value: string) {
    this.set("requestor_id", Value.fromString(value));
  }

  get subject_id(): string {
    let value = this.get("subject_id");
    return value!.toString();
  }

  set subject_id(value: string) {
    this.set("subject_id", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }
}
